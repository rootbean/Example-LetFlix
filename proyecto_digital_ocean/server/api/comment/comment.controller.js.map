{"version":3,"sources":["api/comment/comment.controller.js"],"names":["findByIdShow","show","create","upsert","patch","destroy","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","then","end","handleEntityNotFound","handleError","console","log","send","req","findAll","where","params","idShow","include","model","catch","find","_id","id","data","body","registerDate","Date"],"mappings":"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","file":"comment.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/comments              ->  index\n * POST    /api/comments              ->  create\n * GET     /api/comments/:id          ->  show\n * PUT     /api/comments/:id          ->  upsert\n * PATCH   /api/comments/:id          ->  patch\n * DELETE  /api/comments/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport {Comment} from '../../sqldb';\nimport {User} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      // eslint-disable-next-line prefer-reflect\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.destroy()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    console.log('ERR ', err);\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Comments\nexport function findByIdShow(req, res) {\n  return Comment.findAll({\n    where: {\n      show: req.params.idShow\n    },\n    include: [\n    {model: User}\n    ]\n  })\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Comment from the DB\nexport function show(req, res) {\n  return Comment.find({\n    where: {\n      _id: req.params.id\n    }\n  })\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Comment in the DB\nexport function create(req, res) {\n  let data = req.body;\n  data.registerDate = new Date();\n\n  return Comment.create(data)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Upserts the given Comment in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n\n  return Comment.upsert(req.body, {\n    where: {\n      _id: req.params.id\n    }\n  })\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Comment in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  return Comment.find({\n    where: {\n      _id: req.params.id\n    }\n  })\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Comment from the DB\nexport function destroy(req, res) {\n  return Comment.find({\n    where: {\n      _id: req.params.id\n    }\n  })\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}